#pragma once



#ifndef SALZEK_HEADER_H_
#define SALZEK_HEADER_H_

#include <windows.h>

#define SALZEK_SEED 0xAE86B5B2
#define SALZEK_ROL8(v) (((v << 8) ^ 0x12345678) ^ 0x12345678 | (v >> 24))
#define SALZEK_ROR8(v) (((v >> 8) ^ 0x87654321) ^ 0x87654321 | (v << 24))
#define SALZEK_ROX8(v) ((SALZEK_SEED % 2) ? SALZEK_ROL8(v) : SALZEK_ROR8(v))
#define SALZEK_MAX_ENTRIES 500
#define SALZEK_SASA2VA(Type, DllBase, SASA) (Type)((ULONG_PTR) DllBase + SASA)

#define MYSTATUS NTSTATUS 

typedef struct _SALZEK_CAGRI_ENTRY
{
	DWORD Hash;
	DWORD Address;
} SALZEK_CAGRI_ENTRY, * PSALZEK_CAGRI_ENTRY;

typedef struct _SALZEK_CAGRI_LIST
{
	DWORD Count;
	SALZEK_CAGRI_ENTRY Entries[SALZEK_MAX_ENTRIES];
} SALZEK_CAGRI_LIST, * PSALZEK_CAGRI_LIST;

typedef struct _SALZEK_BEP_DLR_DATA {
	BYTE Reserved1[8];
	PVOID Reserved2[3];
	LIST_ENTRY InMemoryOrderModuleList;
} SALZEK_BEP_DLR_DATA, * PSALZEK_BEP_DLR_DATA;

typedef struct _SALZEK_DLR_DATA_TABLE_ENTRY {
	PVOID Reserved1[2];
	LIST_ENTRY InMemoryOrderLinks;
	PVOID Reserved2[2];
	PVOID DllBase;
} SALZEK_DLR_DATA_TABLE_ENTRY, * PSALZEK_DLR_DATA_TABLE_ENTRY;

typedef struct _SALZEK_BEP {
	BYTE Reserved1[2];
	BYTE BeingDebugged;
	BYTE Reserved2[1];
	PVOID Reserved3[2];
	PSALZEK_BEP_DLR_DATA DLR;
} SALZEK_BEP, * PSALZEK_BEP;

//DWORD SALZEK_HashCAGRI(PCSTR FunctionName);
//BOOL SALZEK_PopulateCAGRIList(void);
//EXTERN_C DWORD SALZEK_GetCAGRINumber(DWORD FunctionHash);

#ifndef InitializeObjectAttributes
#define InitializeObjectAttributes( p, n, a, r, s ) { \
	(p)->Length = sizeof( OBJECT_ATTRIBUTES );        \
	(p)->RootDirectory = r;                           \
	(p)->Attributes = a;                              \
	(p)->ObjectName = n;                              \
	(p)->SecurityDescriptor = s;                      \
	(p)->SecurityQualityOfService = NULL;             \
}
#endif

typedef struct _UNICODE_STRING
{
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _PS_ATTRIBUTE
{
	ULONG  Attribute;
	SIZE_T Size;
	union
	{
		ULONG Value;
		PVOID ValuePtr;
	} u1;
	PSIZE_T ReturnLength;
} PS_ATTRIBUTE, * PPS_ATTRIBUTE;

typedef struct _OBJECT_ATTRIBUTES
{
	ULONG           Length;
	HANDLE          RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

typedef struct _PS_ATTRIBUTE_LIST
{
	SIZE_T       TotalLength;
	PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;

EXTERN_C MYSTATUS NtBellekAyir(
	IN HANDLE ProcessHandle,
	IN OUT PVOID* BaseAddress,
	IN ULONG ZeroBits,
	IN OUT PSIZE_T RegionSize,
	IN ULONG AllocationType,
	IN ULONG Protect);

EXTERN_C MYSTATUS NtHafizayaYaz(
	IN HANDLE ProcessHandle,
	IN PVOID BaseAddress,
	IN PVOID Buffer,
	IN SIZE_T NumberOfBytesToWrite,
	OUT PSIZE_T NumberOfBytesWritten OPTIONAL);



EXTERN_C MYSTATUS NtIpOlustur(
	OUT PHANDLE ThreadHandle,
	IN ACCESS_MASK DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL,
	IN HANDLE ProcessHandle,
	IN PVOID StartRoutine,
	IN PVOID Argument OPTIONAL,
	IN ULONG CreateFlags,
	IN SIZE_T ZeroBits,
	IN SIZE_T StackSize,
	IN SIZE_T MaximumStackSize,
	IN PPS_ATTRIBUTE_LIST AttributeList OPTIONAL);

#endif
