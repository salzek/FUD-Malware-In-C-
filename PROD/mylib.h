#pragma once

#include <stdint.h>

__declspec(code_seg(".mrdata"))
void topla(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
	unsigned int i;
	uint32_t v0 = v[0], v1 = v[1], sum = 0, delta = 0x9E3779B9;
	for (i = 0; i < num_rounds; i++) {
		v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
		sum += delta;
		v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
	}
	v[0] = v0; v[1] = v1;
}
__declspec(code_seg(".mrdata"))
void cikarma(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) {
	unsigned int i;
	uint32_t v0 = v[0], v1 = v[1], delta = 0x9E3779B9, sum = delta * num_rounds;
	for (i = 0; i < num_rounds; i++) {
		v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
		sum -= delta;
		v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
	}
	v[0] = v0; v[1] = v1;
}


__declspec(code_seg(".mrdata"))
int karistir(uint32_t* addr, uint32_t const key[4], int size) {

	char d = size / (2 * sizeof(uint32_t)), // carpan
		e = size - d * (2 * sizeof(uint32_t)), // kalan bytes
		n = (size % (2 * sizeof(uint32_t))) ? 1 : 0,
		c = d + n; // loop count

	for (int i = 0; i < c; i++) {

		topla(32, addr, key);

		addr += 2;
	}

	return e;
}

__declspec(code_seg(".mrdata"))
void coz(uint32_t* addr, uint32_t const key[4], int size) {
	char d = size / (2 * sizeof(uint32_t)), // carpan
		e = size - d * (2 * sizeof(uint32_t)), // kalan bytes
		n = (size % (2 * sizeof(uint32_t))) ? 1 : 0,
		c = d + n; // loop count

	for (int i = 0; i < c; i++) {

		cikarma(32, addr, key);

		addr += 2;
	}
}

